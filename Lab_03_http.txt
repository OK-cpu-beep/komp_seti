server:

//Листинг сервера :

#include <iostream>
#include <sstream>
#include <string>

// Для корректной работы freeaddrinfo в MinGW
#define _WIN32_WINNT 0x501
#include <WinSock2.h>
#include <WS2tcpip.h>

#pragma comment(lib, "Ws2_32.lib")
#define BUF_SIZE 1024

using std::cerr;
using namespace std;

int main() {
	setlocale(LC_ALL, "rus");
	// Оформление окна
	cout << "НТТР-сервер Футбольник!!!\n";
	cout << "Ожидание подключения";

	WSADATA ws;
	if (WSAStartup(MAKEWORD(2, 2), &ws)) {
		cerr << "Ошибка WSAStartup! \n" << WSAGetLastError();
		return -1;
	}

	// IP-адрес слушающего сокета сервера
	addrinfo* addr = NULL;

	// Шаблон для инициализации структуры адреса
	addrinfo hints;
	ZeroMemory(&hints, sizeof(hints));

	hints.ai_family = AF_INET;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_protocol = IPPROTO_TCP;
	hints.ai_flags = AI_PASSIVE;

	// Инициализируем структуру, хранящую адрес сокета
	// Наш HTTP-сервер будет висеть на 8000-м порту localhost
	if (getaddrinfo("127.0.0.1", "8000", &hints, &addr)) {
		cerr << "Ошибка getaddrinfo! \n" << WSAGetLastError();
		WSACleanup();
		return -1;
	}

	// Создаем слушающий сокет
	SOCKET listener = socket(addr->ai_family, addr->ai_socktype, addr->ai_protocol);
	if (listener == INVALID_SOCKET) {
		cerr << "Ошибка socket! \n" << WSAGetLastError();
		WSACleanup();
		return -1;
	}

	// Привязываем слушающий сокет к IP-адресу сервера
	if (bind(listener, addr->ai_addr, addr->ai_addrlen) == SOCKET_ERROR) {
		cerr << "Ошибка bind! \n" << WSAGetLastError();
		closesocket(listener);
		freeaddrinfo(addr);
		WSACleanup();
		return -1;
	}
	// Инициализируем слушающий сокет
	if (listen(listener, SOMAXCONN) == SOCKET_ERROR) {
		cerr << "Ошибка bind! \n" << WSAGetLastError();
		closesocket(listener);
		freeaddrinfo(addr);
		WSACleanup();
		return -1;
	}
	char buf[BUF_SIZE] = {};
	SOCKET sClient;
	// Цикл приема сообщений
	while (true) {
		// Принимаем входящее соединение 
		if ((sClient = accept(listener, NULL, NULL)) == INVALID_SOCKET) {
			cerr << "Ошибка accept! \n" << WSAGetLastError();
			closesocket(listener);
			freeaddrinfo(addr);
			WSACleanup();
			return -1;
		}
		int len = recv(sClient, (char*)buf, BUF_SIZE, 0);
		if (len == SOCKET_ERROR) {
			cerr << "Ошибка recv! \n" << WSAGetLastError();
			closesocket(sClient);
		}
		if (len == 0) {
			cout << "Соединение закрыто клиентом" << endl;
		}
		else {
			cout << "Присоединился новый клиент!\n";
			// Ставим метку конца строки в буфере запроса
			buf[len] = '\0';

			// Формируем ответ в формате HTML
			std::stringstream responseBody, response;
			// Тело ответа
			responseBody << "<title> Top 10 footbal players </title>\n"
				<< "<h1>Top 10 footbal players</h1>\n"
				<< "<p> Rodri | Speed: 8 | Power: 7 | Height: 190cm </p>\n <p> Messi | Speed: 8 | Power: 10 | Height: 170cm </p>\n"
				<< "<p> DeBryine | Speed: 7 | Power: 7 | Height: 181cm </p>\n <p> VanDjik | Speed: 7 | Power: 8 | Height: 195cm </p>\n"
				<<" <p> Kane  | Speed: 8 | Power: 8 | Height: 188cm</p>\n <p> Levandowski  | Speed: 7 | Power: 9 | Height: 185cm</p> \n"
				<< " <p> Mbappe | Speed: 10 | Power: 7 | Height: 178cm </p>\n <p> Belingham | Speed: 7 | Power: 9 | Height: 186cm</p>\n " 
				<< "<p> Ronaldo | Speed: 9 | Power: 10 | Height: 187cm</p>\n <p> Vinicius | Speed: 10 | Power: 8 | Height: 176cm </p>\n"
				<< "<h2>Request headers(Test data)</h2>\n"
				<< "<pre>" << buf << "</pre>\n"
				<< "<em><small>Test C++ Http Server</small></em>\n";

			// Весь ответ
			response << "HTTP/1.1 200 OK\r\n"
				<< "Version: HTTP/1.1\r\n"
				<< "Content-Type: text/html; charset=utf-8\r\n"
				<< "Content-Length: " << responseBody.str().length()
				<< "\r\n\r\n" << responseBody.str();
			// Отправляем ответ клиенту
			if (send(sClient, response.str().c_str(),
				response.str().length(), 0) == SOCKET_ERROR) {
				cerr << "Ошибка send! \n" << WSAGetLastError();
			}
			// Закрываем соединение
			closesocket(sClient);
		}
	}
	closesocket(listener);
	freeaddrinfo(addr);
	WSACleanup();
	return 0;
}



client:


//Листинг клиента :

#include <iostream>
#include <string>
#define _WINSOCK_DEPRECATED_NO_WARNINGS  
#include <WinSock2.h>

#pragma comment(lib, "Ws2_32.lib")
#define BUF_SIZE 4096
#define JSONrequest 

using namespace std;

void HTTP_Connection(string host, string request) {
	// Создание сокета
	SOCKET s;
	if ((s = socket(AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET) {
		cout << "Ошибка socket! \n";
		return;
	}

	// Получаем адрес хоста
	HOSTENT* hn;
	if ((hn = gethostbyname(host.c_str())) == NULL) {
		cout << "Ошибка socket! \n";
		closesocket(s);
		return;
	}

	// Заполняем структуру адреса сервера
	sockaddr_in adr;
	adr.sin_family = AF_INET;
	((unsigned long*)&adr.sin_addr)[0] =
		((unsigned long**)hn->h_addr_list)[0][0];
	adr.sin_port = htons(host == "localhost" ? 8000 : 80);

	// Устанавливаем соединение с сервером
	if (connect(s, (sockaddr*)&adr, sizeof(adr)) == SOCKET_ERROR) {
		cout << "Ошибка connect! \n";
		closesocket(s);
		return;
	}

	// Посылаем запрос
	if (send(s, request.c_str(), request.size(), 0) == SOCKET_ERROR) {
		cout << "Ошибка send! \n";
		closesocket(s);
		return;
	}

	// Получаем ответ
	int len = 0;
	char buf[BUF_SIZE + 1];
	// Получаем все части ответа
	do {
		if ((len = recv(s, (char*)&buf, BUF_SIZE, 0)) == SOCKET_ERROR) {
			cout << "Ошибка send! \n";
			closesocket(s);
			return;
		}
		buf[len] = '\0';
		cout << buf;
	} while (len != 0); // Пока пакеты не закончатся

	// Закрываем соединение
	if (closesocket(s) == SOCKET_ERROR)
		return;
	return;
}

int main() {
	setlocale(LC_ALL, "rus");
	// Оформление окна
	cout << "\t Веб-клиент\n";
	for (int i = 0; i < 30; i++)
		cout << " ";
	cout << endl;
	cout << "Куда хотим подключится?: \n"
		<< "1: Подключиться к HTTP-серверу С++ \n"
		<< "2: Подключиться ко стороннему сайту \n";
	cout << endl;

	WSADATA ws;
	if (WSAStartup(MAKEWORD(2, 2), &ws)) {
		cerr << "Ошибка WSAStartup! \n" << WSAGetLastError();
		return -1;
	}
	int type;
	while (true) {
		cout << "Введите тип подключения:(1 если C++ 2 если стронний сайт) ";
		cin >> type;

		if (type == 1) {
			// НТРР-сервер С++
			HTTP_Connection("localhost",
				"GET/ HTTP/1.1\r\n host: localhost \r\n\r\n");
		}
		else {
			if (type == 2) {
				// www.json.org
				HTTP_Connection("www.json.org",
					"GET /json-en.html HTTP/1.1\r\nHost: www.json.org\r\nConnection: close\r\n\r\n");
			}
			else {
				cout << "Такого выбора нет :/ выберете другое";
			}
		}
		cout << endl;
	}

	WSACleanup();
	return 0;
}



